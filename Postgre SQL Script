--Dimension Creation---

CREATE TABLE customer (
  customer_key   SERIAL PRIMARY KEY,
  customer_id    TEXT UNIQUE,
  customer_name  TEXT NOT NULL,
  address        TEXT,
  city           TEXT,
  state          TEXT,
  zipcode        TEXT,
  country        TEXT
);

CREATE TABLE product (
  product_key    SERIAL PRIMARY KEY,
  product_id     TEXT UNIQUE,
  product_name   TEXT NOT NULL,
  category       TEXT,
  price          NUMERIC(12,4) CHECK (price IS NULL OR price >= 0)
);

CREATE TABLE salesperson (
  salesperson_key  SERIAL PRIMARY KEY,
  salesperson_id      TEXT UNIQUE,
  salesperson_name TEXT NOT NULL,
  region        TEXT,
);

CREATE TABLE salesorder (
  salesorder_key   SERIAL PRIMARY KEY,
  order_id    TEXT UNIQUE NOT NULL,
  order_data DATE NOT NULL,
  customer_key INTEGER NOT NULL REFERENCES customer(customer_key),
  product_key INTEGER NOT NULL REFERENCES product(product_key),
  quantity NUMERIC(12,2) NOT NULL CHECK (quantity >=0),
  salesperson_key INTEGER REFERENCES salesperson(salesperson_key),
  payment_type TEXT,
);

--index for analytics/FK filters--

CREATE INDEX so_order_id_idx ON salesorder(order_id);
CREATE INDEX so_order_date_idx ON salesorder (order_date);
CREATE INDEX so_customer_idx ON salesorder (customer_key);
CREATE INDEX so_product_idx ON salesorder(product_key);
CREATE INDEX so_salesperson_idx ON salesorder(salesperson_key);

CREATE TABLE fact_sales (
  sales_key  BIGSERIAL PRIMARY KEY,
  customer_key INTEGER NOT NULL REFERENCES customer(customer_key),
  salesorder_key INTEGER NOT NULL REFERENCES salesorder(salesorder_key),
  salesperson_key INTEGER NOT NULL REFERENCES salesperson(salesperson_key),
  product_key INTEGER NOT NULL REFERENCES product(product_key)
 CONSTRAINT uq_fact_sales UNIQUE (product_key, salesperson_key,salesorder_key));

--Performance indexes--
CREATE INDEX f_sales_customer_idx ON fact_sales(customer_key);
CREATE INDEX f_sales_salesorder_idx ON fact_sales(salesorder_key);
CREATE INDEX f_sales_product_idx ON fact_sales(product_key);
CREATE INDEX f_sales_salesperson_idx ON fact_sales(salesperson_key);


--Staging tables creation---
CREATE TABLE stg_product (
productid TEXT,
productname TEXT,
category TEXT,
price TEXT
);

CREATE TABLE stg_customer (
customerid TEXT, 
customername TEXT, 
address TEXT,
city TEXT,
state TEXT,
zipcode TEXT,
country TEXT
);

CREATE TABLE stg_salesperson (
salespersonid TEXT,
salespersonname TEXT,
region TEXT
);

CREATE TABLE_salesorder (
orderid TEXT,
orderdate TEXT,
customerid TEXT,
productid TEXT,
quantity TEXT,
paymenttype TEXT,
salespersonid TEXT 
);

--Use psql to execute \copy works---
\copy stg_salesperson FROM 'data/Sales_Salesperson.csv' 
\copy stg_salesorder  FROM 'data/Sales_Salesorder.csv'  
\copy stg_product     FROM 'data/Sales_product.csv'     
\copy stg_customer    FROM 'data/Sales_customer.csv'    


--Upsert into dimension tables

--Customer Dimension--
INSERT INTO customer(customer_id, customer_name, address,city, state, zipcode)
SELECT DISTINCT 
s.customerid,
s.customername,
s.address,
s.city,
s.state,
s.zipcode
s.country
FROM stg_customer s
WHERE s.customerid IS NOT NULL
ON CONFLICT (customer_id) DO UPDATE
SET customer_name =EXCLUDED.customer_name,
address =EXCLUDED.address,
city= EXCLUDED.city
state= EXCLUDED.state
zipcode= EXCLUDED.zipcode, 
country= EXCLUDED.COUNTRY;

--Product Dimension--
INSERT INTO product (product_id, product_name, category, price)
SELECT DISTINCT
s.productid,
s.productname,
s.category,
NULLIF (REPLACE(REPLACE(s.price,'$',''),',',''),'')::numeric
FROM stg_product s
WHERE s.productid IS NOT NULL
ON CONFLICT (product_id) DO UPDATE
SET product_name=EXCLUDED.product_name,
   category=EXCLUDED.category,
   price=EXCLUDED.price;

--Salesperson customer--
INSERT INTO salesperson (salesperson_id, salesperson_name, region)
SELECT DISTINCT
s.salespersonid,
s.salespersonname,
s.region
FROM stg_salesperson s
WHERE s.salespersonid IS NOT NULL
ON CONFLICT (salesperson_id) DO UPDATE 
SET salesperson_name = EXCLUDED.salesperson_name,
    region= EXCLUDED.region;

--Parse OrderDate--
INSERT INTO salesorder (order_id, order_date, customer_key, product_key, quantity, salesperson_key)
SELECT 
so.orderid,
CASE
 WHEN so.orderdate ~ '^\d{4}-\d{2}-\d{2}$' THEN so.orderdate::date
 ELSE to_date(so.orderdate, 'DD-Mon-YY')
 END AS order_date,
c.customer_key,
p.product_key,
NULLIF(so.quantity,'')::numeric,
sp.salesperson_key,
so.paymenttype
FROM stg_salesorder so
JOIN customer c ON c.customer_id = so.customerid
JOIN product p ON  p.product_id = so.productid
LEFT JOIN salesperson sp ON sp.salesperson_id = so.salespersonid
ON CONFLICT (order_id) DO NOTHING; 

--Derive fact_sales--
INSERT INTO fact_sales (customer_key, salesorder_key, salesperson_key, product_key)
SELECT so.customer_key, so.salesorder_key, so.salesperson_key, so.product_key
FROM salesorder so
LEFT JOIN fact_sales f
ON f.salesorder_key = so.salesorder_key
AND f.product_key = so.product_key
AND f.salesperson_key= so.salesperson_key
WHERE f.sales_key IS NULL

--Row counts--
SELECT 'customer' t, COUNT(*) FROM customer
UNION ALL SELECT 'product', COUNT(*) FROM product
UNION ALL SELECT 'salesperson', COUNT(*) FROM salesperson
UNION ALL SELECT 'salesorder', COUNT(*) FROM salesorder
UNION ALL SELECT 'fact_sales', COUNT(*) FROM fact_sales;

--Possible Orphans--
--Salesorder to Customer--
SELECT COUNT(*) AS missing_customer
FROM salesorder so
LEFT JOIN customer c ON c.customer_key = so.customer_key
WHERE c.customer_key IS NULL;

--Salesorder to product--
SELECT COUNT(*) AS missing_product
FROM salesorder so
LEFT JOIN product p ON p.product_key = so.product_key
WHERE p.product_key IS NULL;

--Salesorder to Salesperson--
SELECT COUNT(*) AS missing_salesperson
FROM salesorder so
LEFT JOIN salesperson s ON s.salesperson_key = so.salesperson_key
WHERE so.salesperson_key IS NOT NULL AND s.salesperson_key IS NULL;

-- Fact_sales to Salesorder--
SELECT COUNT(*) AS missing_salesorder
FROM fact_sales f
LEFT JOIN salesorder so ON so.salesorder_key = f.salesorder_key
WHERE so.salesorder_key IS NULL;

